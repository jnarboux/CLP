% problem: if the domain is nonempty, then
% all X. p(X) \/ q(X)
% all X. p(X) => q(f(f(X)))
% all X. q(X) => p(f(X))
% imply
% exists X. p(X) /\ q(X)


true => dom(c).

p(X),f(X,Y),f(Y,Z) => q(Z).
q(X),f(X,Y) => p(Y).
dom(X) => p(X);q(X).

p(X),q(X) => goal.

dom(X) => dom(Y),f(X,Y).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Check ap.
%% 
%% Variable dom:Set.
%% Parameter c:dom.
%% Parameter f : dom -> dom.
%% Parameter p: dom -> Prop.
%% Parameter q : dom -> Prop.
%% 
%% Definition gf:= fun x y: dom =>  f x = y.
%% 
%% Definition goal:= exists X:dom, p X /\ q X.
%% 
%% 
%% Theorem x: (forall A : dom, p A -> q (f ( f A ) )) ->
%%            (forall A : dom, q A -> p (f A)) ->
%%            (forall A : dom, p A \/ q A) ->
%%             exists B : dom, p B /\ q B.
%% 
%% Proof. 
%% intros.
%% apply (ap dom (fun x y: dom =>  f x = y) (exists X:dom, p X /\ q X) p q c).
%% intros. elim H2. intros. elim H4. intros. elim H6. elim H5. auto.
%% intros. elim H2. intros. elim H4. auto.
%% assumption.
%% intros. exists A. assumption.
%% intros. exists (f A). auto.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
