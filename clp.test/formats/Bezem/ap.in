:- dynamic f/2,p/1,q/1.

% problem: if the domain is nonempty, then
% all X. p(X) \/ q(X)
% all X. p(X) => q(f(f(X)))
% all X. q(X) => p(f(X))
% imply
% exists X. p(X) /\ q(X)

name(ap).

dom(c).

%assumptions
_ axiom pffq(X,Y,Z): (p(X),f(X,Y),f(Y,Z) => q(Z)).
_ axiom qfp(X,Y): (q(X),f(X,Y) => p(Y)).
_ axiom porq(X): (dom(X) => p(X);q(X) ).
%goal
_ axiom finish(X): (p(X),q(X) => goal).

% function
_ axiom func(X):(dom(X) => dom(Y),f(X,Y)).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/*

Check ap.

Variable dom:Set.
Parameter c:dom.
Parameter f : dom -> dom.
Parameter p: dom -> Prop.
Parameter q : dom -> Prop.

Definition gf:= fun x y: dom =>  f x = y.

Definition goal:= exists X:dom, p X /\ q X.


Theorem x: (forall A : dom, p A -> q (f ( f A ) )) ->
           (forall A : dom, q A -> p (f A)) ->
           (forall A : dom, p A \/ q A) ->
            exists B : dom, p B /\ q B.

Proof. 
intros.
apply (ap dom (fun x y: dom =>  f x = y) (exists X:dom, p X /\ q X) p q c).
intros. elim H2. intros. elim H4. intros. elim H6. elim H5. auto.
intros. elim H2. intros. elim H4. auto.
assumption.
intros. exists A. assumption.
intros. exists (f A). auto.

*/

